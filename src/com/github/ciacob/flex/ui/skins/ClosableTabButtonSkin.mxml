<?xml version="1.0" encoding="utf-8"?>

<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    xmlns:icons="com.github.ciacob.flex.ui.icons.*"
    minWidth="21" minHeight="21"
    alpha.disabled="0.5"
    preinitialize="_onPreinitialize()">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[
            /**
             * @copy spark.skins.spark.ApplicationSkin#hostComponent
             */
            [HostComponent("spark.components.ButtonBarButton")]
        ]]>
    </fx:Metadata>

<fx:Script fb:purpose="styling">
        <![CDATA[

            import flash.events.MouseEvent;
            import spark.components.ButtonBarButton;
            import mx.events.CloseEvent;
            import com.github.ciacob.flex.ui.ColorUtils;

            [Bindable]
            public var edgeType: String;

            [Bindable]
            private var _mustShowX : Boolean = false;

            [Bindable]
            private var _fontSize : int;

            [Bindable]
            private var _chromeColor: uint = 0;

            private var _edgeType:String;

            private var _hc:ButtonBarButton;

            private var _cornerRadius:Number = 2;

            private var _color : uint = 0;

            private var _iconMaxSize : Number = NaN;

            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {

                // Round the corners if applicable, based on edge type.
                if (edgeType === "Left" || edgeType === "Right") {

                    var cr:Number = getStyle("cornerRadius");
                    if (_cornerRadius != cr || _edgeType != edgeType) {
                        _cornerRadius = cr;
                        _edgeType = edgeType;

                        const topRadiusX: String = "top" + edgeType + "RadiusX";
                        const bottomRadiusX: String = "bottom" + edgeType + "RadiusX";

                        shadow[topRadiusX] = _cornerRadius;
                        shadow[bottomRadiusX] = _cornerRadius;
                        fill[topRadiusX] = _cornerRadius;
                        fill[bottomRadiusX] = _cornerRadius;
                        lowlight[topRadiusX] = _cornerRadius;
                        lowlight[bottomRadiusX] = _cornerRadius;
                        highlight[topRadiusX] = _cornerRadius;
                        highlight[bottomRadiusX] = _cornerRadius;
                        highlightStroke[topRadiusX] = _cornerRadius;
                        highlightStroke[bottomRadiusX] = _cornerRadius;
                        border[topRadiusX] = _cornerRadius;
                        border[bottomRadiusX] = _cornerRadius;

                        if (hldownstroke1) {
                            hldownstroke1[topRadiusX] = _cornerRadius;
                            hldownstroke1[bottomRadiusX] = _cornerRadius;
                        }
                        if (hldownstroke2) {
                            hldownstroke2[topRadiusX] = _cornerRadius;
                            hldownstroke2[bottomRadiusX] = _cornerRadius;
                        }
                    }                    
                }

                // Use "chromeColor" to custom tint the lower layers of the button background.
                // Unlike the OOB approach, this does not destroy icon colorization.
                var cc : uint = getStyle("chromeColor");
                if (bg && _chromeColor != cc) {
                    _chromeColor = cc;
                    ColorUtils.applyChromeColor (_chromeColor, bg);
                }
                
                // Use "color" to recolor the icon
                var co : uint = getStyle("color");
                if (closeIcon && iconContainer && _mustShowX && _color != co) {
                    _color = co;
                    ColorUtils.tintSprite(_color, iconContainer, 2);
                }

                // Use "fontSize" to control the icon size
                var fs : int = getStyle("fontSize");
                if (_fontSize != fs) {
                    _fontSize = fs;
                        if (closeIcon && !isNaN(_iconMaxSize) && _iconMaxSize > 0) {
                            const iconScale : Number = (_fontSize / _iconMaxSize)* 0.7;
                            iconContainer.scaleX = iconContainer.scaleY = iconScale;
                        }
                }

                // Decide whether to show the close button
                _mustShowX = _hc && _hc.data && ('closable' in _hc.data) && !!_hc.data.closable;
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }

            private function _onPreinitialize():void {
            
                // Allow click on the `close` button if present.
                hostComponent.mouseChildren = true;
            
                // Expose a correctly typed host component.
                if (hostComponent is ButtonBarButton) {
                    _hc = hostComponent as ButtonBarButton;
                }
            
                // If we have an icon, take note of its original, intrinsic size (to be used for scaling).
                if (closeIcon) {
                    _iconMaxSize = Math.max(closeIcon.width, closeIcon.height);
            
                }
            }
            
            private function _onTabXClick(event:MouseEvent):void {
                event.preventDefault();
                event.stopPropagation();
                if (_hc && _hc.data) {
                    var closeEvent:CloseEvent = new CloseEvent(CloseEvent.CLOSE, true);
                    closeEvent.detail = _hc.itemIndex;
                    _hc.dispatchEvent(closeEvent);
                }
            }

        ]]>
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up"/>
        <s:State name="over" stateGroups="overStates"/>
        <s:State name="down" stateGroups="downStates"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates"/>
    </s:states>

    <s:Group id="bg" left="0" right="0" top="0" bottom="0">

        <!-- layer 1: shadow -->
        <s:Rect id="shadow" left="0" right="0" bottom="-1" height="1">
            <s:fill>
                <s:SolidColor color="0x000000"
                    color.downStates="0xFFFFFF"
                    alpha="0.07"
                    alpha.downStates="0.5"/>
            </s:fill>
        </s:Rect>

        <!-- layer 2: fill -->
        <s:Rect id="fill" left="1" right="1" top="1" bottom="1">
            <s:fill>
                <s:LinearGradient rotation="90">
                    <s:GradientEntry color="0xFFFFFF"
                        color.selectedUpStates="0xBBBDBD"
                        color.overStates="0xBBBDBD"
                        color.downStates="0xAAAAAA"
                        alpha="0.85"
                        alpha.overAndSelected="1"/>
                    <s:GradientEntry color="0xD8D8D8"
                        color.selectedUpStates="0x9FA0A1"
                        color.over="0x9FA0A1"
                        color.overAndSelected="0x8E8F90"
                        color.downStates="0x929496"
                        alpha="0.85"
                        alpha.overAndSelected="1"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>

        <!-- layer 3: fill lowlight -->
        <s:Rect id="lowlight" left="1" right="1" top="1" bottom="1">
            <s:fill>
                <s:LinearGradient rotation="270">
                    <s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627"/>
                    <s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099"/>
                    <s:GradientEntry color="0x000000" ratio="0.48001" alpha="0"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>

        <!-- layer 4: fill highlight -->
        <s:Rect id="highlight" left="1" right="1" top="1" bottom="1">
            <s:fill>
                <s:LinearGradient rotation="90">
                    <s:GradientEntry color="0xFFFFFF"
                        ratio="0.0"
                        alpha="0.33"
                        alpha.selectedUpStates="0.22"
                        alpha.overStates="0.22"
                        alpha.downStates="0.12"/>
                    <s:GradientEntry color="0xFFFFFF"
                        ratio="0.48"
                        alpha="0.33"
                        alpha.selectedUpStates="0.22"
                        alpha.overStates="0.22"
                        alpha.downStates="0.12"/>
                    <s:GradientEntry color="0xFFFFFF"
                        ratio="0.48001"
                        alpha="0"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>

        <!-- layer 5: highlight stroke (all states except down) -->
        <s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" excludeFrom="downStates">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0xFFFFFF" alpha.overStates="0.22" alpha.selectedUpStates="0.33"/>
                    <s:GradientEntry color="0xD8D8D8" alpha.overStates="0.22" alpha.selectedUpStates="0.33"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>

        <!-- layer 6: highlight stroke (down state only) -->
        <!--- 
        @private
    -->
        <s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1"
            includeIn="downStates, selectedUpStates, overAndSelected">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.0"/>
                    <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.001"/>
                    <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.0011"/>
                    <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.965"/>
                    <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.9651"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>
        <!--- 
        @private
    -->
        <s:Rect id="hldownstroke2" left="2" right="2" top="2" bottom="2"
            includeIn="downStates, selectedUpStates, overAndSelected">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0"/>
                    <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0001"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>

        <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
        <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0x000000"
                        alpha="0.5625"
                        alpha.down="0.6375"
                        alpha.selectedStates="0.6375"/>
                    <s:GradientEntry color="0x000000"
                        alpha="0.75"
                        alpha.down="0.85"
                        alpha.selectedStates="0.85"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>

    </s:Group>

    <!-- layer 8: text -->
    <!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Group width="100%" height="100%">
        <s:layout>
            <s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"
                padding="{_fontSize * 0.8}"/>
        </s:layout>
        <s:Label id="labelDisplay"
            textAlign="center"
            verticalAlign="middle"
            maxDisplayedLines="1"/>
        <s:Group id="iconContainer" visible="{_mustShowX}" includeInLayout="{_mustShowX}">
            <icons:SimpleCloseIcon id="closeIcon" click="_onTabXClick(event)"/>
        </s:Group>
    </s:Group>

</s:SparkButtonSkin>