<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    minWidth="21" minHeight="21"
    alpha.disabled="0.5"
    initialize="_onInitialize(event)">

    <fx:Metadata>
        <![CDATA[
            /**
             * @copy spark.skins.spark.ApplicationSkin#hostComponent
             */
            [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>

<fx:Script fb:purpose="styling">
        <![CDATA[         
            import spark.components.Group;
            import ro.ciacob.utils.ColorUtils;
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = false;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Use "cornerRadius" style to round button corners
                var cr:Number = getStyle("cornerRadius");
                if (_cornerRadius != cr)
                {
                    _cornerRadius = cr;
                    shadow.radiusX = _cornerRadius;
                    fill.radiusX = _cornerRadius;
                    lowlight.radiusX = _cornerRadius;
                    highlight.radiusX = _cornerRadius;
                    border.radiusX = _cornerRadius;
                }
                
                if (highlightStroke) highlightStroke.radiusX = _cornerRadius;
                if (hldownstroke1) hldownstroke1.radiusX = _cornerRadius;
                if (hldownstroke2) hldownstroke2.radiusX = _cornerRadius;
                
                // Update label if changed
                if (_text !== null && textContainer.text != _text) {
                    textContainer.text = _text;
                }
                
                // Use "color" to recolor the icon
                var co : uint = getStyle("color");
                if (_icon && _color != co) {
                    _color = co;
                    ColorUtils.tintSprite(_color, iconContainer);
                }

                // Use "fontSize" to control the icon size
                var fs : int = getStyle("fontSize");
                if (_fontSize != fs && !isNaN(_iconMaxSize) && _iconMaxSize > 0) {
                    _fontSize = fs;
                    if (_icon) {
                        const iconScale : Number = _fontSize / _iconMaxSize;
                        iconContainer.scaleX = iconContainer.scaleY = iconScale;
                    }
                }

                // Use "chromeColor" to tint the lowest layer of the button background.
                // Unlike the OOB approach, this does not destroy the label visibility 
                // when "chromeColor" takes darker shades (as is the case in 
                // "dark themes").
                var cc : uint = getStyle("chromeColor");
                if (_chromeColor != cc) {
                    _chromeColor = cc;
                    ColorUtils.tintSprite(_chromeColor, fillContainer, 0.75);
                }


                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var _cornerRadius:Number = 2;
            private var _color:uint = 0;
            private var _chromeColor: uint = 0;
            private var _content:Object;
            private var _iconMaxSize : Number = NaN;

            [Bindable]
            private var _text:String;

            [Bindable]
            private var _icon:SpriteVisualElement;

            [Bindable]
            private var _fontSize:int = 12;

            [Bindable]
            private var _direction:String;
                                 
        ]]>        
    </fx:Script>

    <fx:Script>
        <![CDATA[
            import spark.primitives.Graphic;
            import flash.utils.getQualifiedClassName;
            import flash.utils.getQualifiedSuperclassName;
            import spark.core.SpriteVisualElement;
            
            private function _onInitialize(event:Event):void {
                if (hostComponent) {
            
                    // The "content" Button property can be just text, just icon, or both in an Array, in any order.
                    // If so, their order within the Array will decide their positioning inside the Button.
                    _content = hostComponent.content;
            
                    if (_content && (_content is Array)) {
            
                        const contentArr:Array = hostComponent.content as Array;
                        if (contentArr[0] is SpriteVisualElement) {
                            _icon = (contentArr[0] as SpriteVisualElement);
                            _text = contentArr[1] as String;
                            _direction = 'ltr';
                        }
                        else {
                            _icon = (contentArr[1] as SpriteVisualElement);
                            _text = contentArr[0] as String;
                            _direction = 'rtl';
                        }
                    }
                    else if (_content is SpriteVisualElement) {
                        _icon = _content as SpriteVisualElement;
                    }
                    else {
                        _text = _content as String;
                    }
            
                    // If we have an icon, take note of its original, intrinsic size (to be used for scaling)
                    // then place it in our custom container.
                    if (_icon) {
                        _iconMaxSize = Math.max(_icon.width, _icon.height);
                        iconContainer.addElement(_icon);
                    }
                }
            }
        ]]>
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up"/>
        <s:State name="over"/>
        <s:State name="down"/>
        <s:State name="disabled"/>
    </s:states>

    <!-- layer 1: shadow -->
    <!--- @private -->
    <s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0x000000"
                    color.down="0xFFFFFF"
                    alpha="0.01"
                    alpha.down="0"/>
                <s:GradientEntry color="0x000000"
                    color.down="0xFFFFFF"
                    alpha="0.07"
                    alpha.down="0.5"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <s:Group id="fillContainer" left="1" right="1" top="1" bottom="1">
        <!-- layer 2: fill -->
        <!--- @private -->
        <s:Rect id="fill" width="100%" height="100%" radiusX="2">
            <s:fill>
                <s:LinearGradient rotation="90">
                    <s:GradientEntry color="0xFFFFFF"
                        color.over="0xBBBDBD"
                        color.down="0xAAAAAA"
                        alpha="0.85"/>
                    <s:GradientEntry color="0xD8D8D8"
                        color.over="0x9FA0A1"
                        color.down="0x929496"
                        alpha="0.85"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>

        <!-- layer 3: fill lowlight -->
        <!--- @private -->
        <s:Rect id="lowlight" width="100%" height="100%" radiusX="2">
            <s:fill>
                <s:LinearGradient rotation="270">
                    <s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627"/>
                    <s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099"/>
                    <s:GradientEntry color="0x000000" ratio="0.48001" alpha="0"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>

        <!-- layer 4: fill highlight -->
        <!--- @private -->
        <s:Rect id="highlight" width="100%" height="100%" radiusX="2">
            <s:fill>
                <s:LinearGradient rotation="90">
                    <s:GradientEntry color="0xFFFFFF"
                        ratio="0.0"
                        alpha="0.33"
                        alpha.over="0.22"
                        alpha.down="0.12"/>
                    <s:GradientEntry color="0xFFFFFF"
                        ratio="0.48"
                        alpha="0.33"
                        alpha.over="0.22"
                        alpha.down="0.12"/>
                    <s:GradientEntry color="0xFFFFFF"
                        ratio="0.48001"
                        alpha="0"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>

        <!-- layer 5: highlight stroke (all states except down) -->
        <!--- @private -->
        <s:Rect id="highlightStroke" width="100%" height="100%" radiusX="2" excludeFrom="down">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0xFFFFFF" alpha.over="0.22"/>
                    <s:GradientEntry color="0xD8D8D8" alpha.over="0.22"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>

        <!-- layer 6: highlight stroke (down state only) -->
        <!--- @private -->
        <s:Rect id="hldownstroke1" width="100%" height="100%" radiusX="2" includeIn="down">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.0"/>
                    <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.001"/>
                    <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.0011"/>
                    <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.965"/>
                    <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.9651"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>

        <!--- @private -->
        <s:Rect id="hldownstroke2" left="1" right="1" top="1" bottom="1" radiusX="2" includeIn="down">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0"/>
                    <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0001"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Rect>

    </s:Group>

    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="20" height="20" radiusX="2">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x000000"
                    alpha="0.5625"
                    alpha.down="0.6375"/>
                <s:GradientEntry color="0x000000"
                    alpha="0.75"
                    alpha.down="0.85"/>
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>

    <!-- layer 8: (icon and) text -->
    <s:Group horizontalCenter="0" verticalCenter="0" layoutDirection="{_direction}">
        <s:layout>
            <s:HorizontalLayout padding="{_fontSize * 0.8}" verticalAlign="middle"/>
        </s:layout>

        <!-- ICON -->
        <s:Group id="iconContainer" visible="{!!_icon}" includeInLayout="{!!_icon}"/>

        <!-- TEXT -->
        <s:Label id="textContainer" visible="{!!_text}" includeInLayout="{!!_text}"
            textAlign="center"
            maxDisplayedLines="1"
            verticalAlign="bottom">
        </s:Label>
    </s:Group>

</s:SparkButtonSkin>
