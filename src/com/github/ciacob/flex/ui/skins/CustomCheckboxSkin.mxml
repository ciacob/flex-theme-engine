<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<!--- The default skin class for the Spark CheckBox component.  

      @see spark.components.CheckBox
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    alpha.disabledStates="0.5">

    <fx:Metadata>
        <![CDATA[
            /**
             * @copy spark.skins.spark.ApplicationSkin#hostComponent
             */
            [HostComponent("spark.components.CheckBox")]
        ]]>
    </fx:Metadata>

<fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay", "checkSelected", "checkEmpty"];

       /** 
        * @private 
        */     
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /* Define the symbol fill items that should be colored by the "symbolColor" style. */
        static private const symbols:Array = ["checkMarkFill", "checkMarkEmptyFill"];

       /**
        * @private 
        */
        override public function get symbolItems():Array {return symbols};
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
    </fx:Script>

    <fx:Script>
        <![CDATA[
            import spark.components.supportClasses.LabelPlacement;
            
            /**
             * @private
             */
            private static const focusExclusions:Array = ["labelDisplay"];
            
            /**
             * @private
             */
            override public function get focusSkinExclusions():Array {
                return focusExclusions;
            };
            
            // --------------------------------------------------------------------------
            // 
            // Overridden methods
            // 
            // --------------------------------------------------------------------------
            
            /**
             *  @copy mx.core.UIComponent#styleChanged
             *
             *  @langversion 3.0
             *  @playerversion Flash 11.8
             *  @playerversion AIR 3.8
             *  @productversion Flex 4.12
             */
            override public function styleChanged(styleProp:String):void {
                super.styleChanged(styleProp);
            
                // Check if the style is null for mass style changes or if the labelPlacement/gap styles were changed.
                if (styleProp == "labelPlacement" || styleProp == "gap" || styleProp === null) {
                    updateLabelPlacement();
                }
            }
            
            // --------------------------------------------------------------------------
            // 
            // Methods
            // 
            // --------------------------------------------------------------------------
            
            /**
             *  Sets the label placement in relation to the checkbox.
             *  Requires the SkinParts <code>checkDisplay</code> and <code>labelDisplay</code>.
             *
             *  @langversion 3.0
             *  @playerversion Flash 11.8
             *  @playerversion AIR 3.8
             *  @productversion Flex 4.12
             */
            public function updateLabelPlacement():void {
                var spacing:int;
            
                if (!checkDisplay || !labelDisplay) {
                    return;
                }
            
                if (getStyle("gap") == undefined) {
                    // Add a default gap if the gap style is undefined.
                    spacing = 5;
                }
                else {
                    spacing = int(getStyle("gap"));
                }
            
                switch (String(getStyle("labelPlacement")).toLowerCase()) {
                    case LabelPlacement.BOTTOM: {
                        // Adjust the labels position to the bottom.
                        labelDisplay.horizontalCenter = 0;
                        labelDisplay.verticalCenter = undefined;
                        labelDisplay.top = checkDisplay.height + spacing;
                        labelDisplay.bottom = 0;
                        labelDisplay.left = 0;
                        labelDisplay.right = 0;
            
                        // Adjust the checkboxes position to the top.
                        checkDisplay.horizontalCenter = 0;
                        checkDisplay.verticalCenter = undefined;
                        checkDisplay.top = 0;
                        checkDisplay.bottom = undefined;
            
                        break;
                    }
            
                    case LabelPlacement.LEFT: {
                        // Adjust the labels position to left side.
                        labelDisplay.horizontalCenter = undefined;
                        labelDisplay.verticalCenter = 2;
                        labelDisplay.top = 3;
                        labelDisplay.bottom = 3;
                        labelDisplay.left = 0;
                        labelDisplay.right = checkDisplay.width + spacing;
            
                        // Adjust the checkboxes position to right side.
                        checkDisplay.horizontalCenter = undefined;
                        checkDisplay.verticalCenter = 0;
                        checkDisplay.left = undefined;
                        checkDisplay.right = 0;
            
                        break;
                    }
            
                    case LabelPlacement.TOP: {
                        // Adjust the labels position to the top.
                        labelDisplay.horizontalCenter = 0;
                        labelDisplay.verticalCenter = undefined;
                        labelDisplay.top = 0;
                        labelDisplay.bottom = checkDisplay.height + spacing;
                        labelDisplay.left = 0;
                        labelDisplay.right = 0;
            
                        // Adjust the checkboxes position to the bottom.
                        checkDisplay.horizontalCenter = 0;
                        checkDisplay.verticalCenter = undefined;
                        checkDisplay.top = undefined;
                        checkDisplay.bottom = 0;
            
                        break;
                    }
            
                    // Making the rightside labelPlacement the default.
                    case LabelPlacement.RIGHT:
                    default: {
                        // Adjust the labels position to right side.
                        labelDisplay.horizontalCenter = undefined;
                        labelDisplay.verticalCenter = 2;
                        labelDisplay.top = 3;
                        labelDisplay.bottom = 3;
                        labelDisplay.left = checkDisplay.width + spacing;
                        labelDisplay.right = 0;
            
                        // Adjust the checkboxes position to left side.
                        checkDisplay.horizontalCenter = undefined;
                        checkDisplay.verticalCenter = 0;
                        checkDisplay.left = 0;
                        checkDisplay.right = undefined;
            
                        break;
                    }
                }
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="up" stateGroups="nonSelectedStates"/>
        <s:State name="over" stateGroups="overStates, nonSelectedStates"/>
        <s:State name="down" stateGroups="downStates, nonSelectedStates"/>
        <s:State name="disabled" stateGroups="disabledStates, nonSelectedStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates"/>
    </s:states>

    <!-- Outer container -->
    <s:Group id="checkDisplay" verticalCenter="0"
        width="{getStyle('fontSize') || 13}"
        height="{getStyle('fontSize') || 13}"
        layoutDirection="ltr">

        <!-- checkmark -->
        <!--- The "checked" icon for this skin. It scales with the current font size. -->
        <s:Path id="checkSelected"
            scaleX="{(getStyle('fontSize') || 13) / 25}"
            scaleY="{(getStyle('fontSize') || 13) / 25}"
            left="0" top="0"
            includeIn="selectedStates"
            itemCreationPolicy="immediate"
            data="M24.6479 2.54395L11.5161 16.5981C11.27 16.8604 10.9263 17.0103 10.5674 17.0103L10.5586 17.0103C10.1958 17.0078 9.85107 16.853 9.60742 16.5854L5.21875 11.7559C4.73682 11.2256 4.7749 10.4038 5.30664 9.92188 5.83789 9.43994 6.65869 9.47803
 7.14063 10.0093L10.5815 13.7949 22.752 0.771484C23.2412 0.247559 24.063 0.219727 24.5884 0.708984 25.1118 1.19873 25.1401 2.02051 24.6504 2.54443L24.6479 2.54395ZM21.7534 9.60742C21.0356 9.60742 20.4551 10.1885 20.4551 10.9063L20.4551 20.4551
 2.59766 20.4551 2.59766 2.59766 16.9546 2.59766C17.6724 2.59766 18.2534 2.0166 18.2534 1.29883 18.2534 0.581055 17.6724 0 16.9546 0L1.29883 0C0.581055 0 0 0.581055 0 1.29883L0 21.7534C0 22.4712 0.581055 23.0522 1.29883 23.0522L21.7534 23.0522
C22.4712 23.0522 23.0522 22.4712 23.0522 21.7534L23.0522 10.9063C23.0522 10.1885 22.4712 9.60742 21.7534 9.60742Z">
            <s:fill>
                <s:SolidColor id="checkMarkFill" color="0" alpha="1" alpha.upAndSelected="0.8"/>
            </s:fill>
        </s:Path>

        <!--- The "empty" icon for this skin. It scales with the current font size. -->
        <s:Path id="checkEmpty"
            scaleX="{(getStyle('fontSize') || 13) / 25}"
            scaleY="{(getStyle('fontSize') || 13) / 25}"
            left="0" top="0"
            includeIn="nonSelectedStates"
            itemCreationPolicy="immediate"
            data="M21.7534 0L1.29883 0C0.581055 0 0 0.581055 0 1.29883L0 21.7534C0 22.4712 0.581055 23.0522 1.29883 23.0522L21.7534 23.0522C22.4712 23.0522 23.0522 22.4712 23.0522 21.7534L23.0522 1.29883C23.0522 0.581055 22.4712 0 21.7534 0ZM2.59766 20.4551
L2.59766 2.59766 20.4551 2.59766 20.4551 20.4551 2.59766 20.4551Z">
            <s:fill>
                <s:SolidColor id="checkMarkEmptyFill" color="0" alpha="1" alpha.up="0.8" />
            </s:fill>
        </s:Path>

    </s:Group>

    <!-- Label -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
        textAlign="start"
        verticalAlign="middle"
        maxDisplayedLines="1"
        left="18" right="0" top="3" bottom="3" verticalCenter="2"/>

</s:SparkSkin>